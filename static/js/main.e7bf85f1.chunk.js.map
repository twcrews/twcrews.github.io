{"version":3,"sources":["App.js","index.js"],"names":["App","useState","shadowNav","setShadowNav","currentThing","setCurrentThing","formData","setFormData","formErrors","setFormErrors","fieldValid","field","val","ID","pattern","RegExp","Pattern","trim","length","test","handleLink","url","window","open","handleFieldChange","event","tmpForm","target","id","name","value","useScrollPosition","_prevPos","isScrolled","currPos","y","useEffect","interval","setInterval","Data","Header","SubtitleItems","clearInterval","className","elevation","position","alt","src","Meta","Logo","variant","Owner","Anchors","map","anchor","Name","Variant","color","Color","onClick","document","getElementById","Link","scrollIntoView","style","backgroundImage","Hero","paragraph","Title","SubtitlePrefix","text","inline","Attributes","attr","Icon","fontSize","Description","Sections","section","Fragment","Content","item","Portfolio","Projects","project","Image","backgroundColor","backgroundSize","backgroundPosition","Enabled","textTransform","Year","opacity","Contact","Fields","gridColumnStart","GridColumnStart","gridColumnEnd","GridColumnSpan","Component","type","Type","label","Label","required","Required","onChange","multiline","Multiline","rows","Rows","error","helperText","HelperText","fullWidth","labelId","Items","size","BreakException","forEach","e","formValid","Button","Footer","Copyright","replace","Date","getFullYear","PromotionLink","PromotionText","theme","createMuiTheme","Theme","ReactDOM","render","StrictMode","ThemeProvider"],"mappings":"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","file":"static/js/main.e7bf85f1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport * as Material from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position';\r\nimport TextTransition from 'react-text-transition';\r\nimport Data from './Data.json';\r\n\r\nfunction App() {\r\n  const [shadowNav, setShadowNav] = useState(false);\r\n  const [currentThing, setCurrentThing] = useState(0);\r\n  const [formData, setFormData] = useState({});\r\n  const [formErrors, setFormErrors] = useState(false);\r\n\r\n  const fieldValid = (field) => {\r\n    var val = formData[field.ID];\r\n    var pattern = new RegExp(field.Pattern);\r\n    if (val) {\r\n      return val.trim().length > 0 && pattern.test(val.trim());\r\n    }\r\n  }\r\n\r\n  const formValid = () => {\r\n    var BreakException = {};\r\n    try {\r\n      Data.Contact.Fields.forEach(field => {\r\n        if (!fieldValid(field)) {\r\n          throw BreakException;\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e !== BreakException) throw e;\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const submitForm = () => {\r\n\r\n  }\r\n\r\n  const handleLink = (url) => { window.open(url, \"_blank\"); };\r\n  const handleFieldChange = (event) => {\r\n    var tmpForm = { ...formData };\r\n    tmpForm[event.target.id ?? event.target.name] = event.target.value;\r\n    setFormData(tmpForm);\r\n  };\r\n  const handleSendClick = () => {\r\n    if (!formValid()) {\r\n      setFormErrors(true);\r\n    } else {\r\n      submitForm();\r\n    }\r\n  };\r\n\r\n  useScrollPosition(({ _prevPos, currPos }) => {\r\n    const isScrolled = currPos.y < 0;\r\n    if (isScrolled !== shadowNav) setShadowNav(isScrolled);\r\n  }, [shadowNav]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (currentThing < Data.Header.SubtitleItems.length - 1) {\r\n        setCurrentThing(currentThing + 1);\r\n      } else {\r\n        setCurrentThing(0);\r\n      }\r\n    }, 2000);\r\n    return (() => clearInterval(interval));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  });\r\n\r\n  return (\r\n    <div className=\"Page\">\r\n      <div className=\"BodyWrap\">\r\n        <div\r\n          id=\"top\"\r\n          className=\"Top\"\r\n        />\r\n        <Material.AppBar\r\n          id=\"nav\"\r\n          elevation={shadowNav ? 3 : 0}\r\n          className=\"AppBar\"\r\n          position=\"sticky\"\r\n        >\r\n          <Material.Toolbar className=\"NavBar\">\r\n            <span className=\"NavItems\">\r\n              <img\r\n                className=\"NavLogo\"\r\n                alt=\"Logo\"\r\n                src={Data.Meta.Logo}\r\n              />\r\n              <Material.Typography\r\n                className=\"NavTitle\"\r\n                variant=\"h6\"\r\n              >\r\n                {Data.Meta.Owner}\r\n              </Material.Typography>\r\n            </span>\r\n            <span className=\"NavItems\">\r\n              {Data.Meta.Anchors.map(anchor =>\r\n                <Material.Button\r\n                  key={anchor.Name}\r\n                  id={anchor.Name}\r\n                  className=\"AnchorButton\"\r\n                  variant={anchor.Variant}\r\n                  color={anchor.Color}\r\n                  onClick={() => document\r\n                    .getElementById(anchor.Link)\r\n                    .scrollIntoView()}\r\n                >\r\n                  {anchor.Name}\r\n                </Material.Button>\r\n              )}\r\n            </span>\r\n          </Material.Toolbar>\r\n        </Material.AppBar>\r\n        <div\r\n          className=\"AboutSection\"\r\n        >\r\n          <div\r\n            className=\"Hero\"\r\n            style={{ backgroundImage: \"url(\" + Data.Header.Hero + \")\" }}\r\n          />\r\n          <Material.Typography\r\n            variant=\"h1\"\r\n            paragraph\r\n            className=\"Header\"\r\n          >\r\n            {Data.Header.Title}\r\n          </Material.Typography>\r\n          <Material.Typography\r\n            variant=\"h4\"\r\n            className=\"Subtitle\"\r\n          >\r\n            {Data.Header.SubtitlePrefix}\r\n            <TextTransition\r\n              text={Data.Header.SubtitleItems[currentThing]}\r\n              inline\r\n            />\r\n          </Material.Typography>\r\n          <div className=\"HeaderSpacer\" />\r\n        </div>\r\n        <div className=\"AttributesSection Content\">\r\n          <div className=\"Attributes\">\r\n            {Data.Attributes.map(attr =>\r\n              <div\r\n                key={attr.Name}\r\n                className=\"AttributeTile\"\r\n              >\r\n                <span className=\"BigIcon\">\r\n                  <Icon fontSize=\"inherit\" color=\"primary\">\r\n                    {attr.Icon}\r\n                  </Icon>\r\n                  <Material.Typography variant=\"h5\">\r\n                    {attr.Name}\r\n                  </Material.Typography>\r\n                </span>\r\n                <div className=\"Multiline GrayText\">\r\n                  <Material.Typography color=\"inherit\">\r\n                    {attr.Description}\r\n                  </Material.Typography>\r\n                  <Material.Typography variant=\"h6\" paragraph />\r\n                  {attr.Sections.map(section =>\r\n                    <React.Fragment key={section.Title}>\r\n                      <Material.Typography variant=\"h6\">\r\n                        {section.Title}\r\n                      </Material.Typography>\r\n                      {section.Content.map(item =>\r\n                        <Material.Typography key={item}>\r\n                          {item}\r\n                        </Material.Typography>\r\n                      )}\r\n                      <Material.Typography variant=\"h6\" paragraph />\r\n                    </React.Fragment>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"Content\" id=\"portfolio\">\r\n          <Material.Typography\r\n            variant=\"h3\"\r\n            paragraph\r\n            className=\"SectionHeader\"\r\n          >\r\n            {Data.Portfolio.Title}\r\n          </Material.Typography>\r\n          <span className=\"GrayText\">\r\n            <Material.Typography variant=\"subtitle1\" paragraph>\r\n              {Data.Portfolio.Description}\r\n            </Material.Typography>\r\n          </span>\r\n          <div className=\"PortfolioTiles\">\r\n            {Data.Portfolio.Projects.map(project =>\r\n              <div\r\n                key={project.Title}\r\n                className=\"PortfolioProject\"\r\n                style={{\r\n                  backgroundImage: \"url(\" + project.Image + \")\",\r\n                  backgroundColor: \"#00b9ff\",\r\n                  backgroundSize: \"cover\",\r\n                  backgroundPosition: \"center\"\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"Darken FullHeight\"\r\n                  onClick={() => project.Enabled ?\r\n                    handleLink(project.Link) :\r\n                    null}\r\n                >\r\n                  <div className=\"ProjectTypography\">\r\n                    <Material.Typography variant=\"h6\">\r\n                      {project.Title}\r\n                    </Material.Typography>\r\n                    <Material.Typography\r\n                      variant=\"caption\"\r\n                      style={{ textTransform: \"uppercase\" }}\r\n                    >\r\n                      {project.Year}\r\n                    </Material.Typography>\r\n                    <Material.Typography\r\n                      variant=\"subtitle2\"\r\n                      style={{ opacity: 0.8 }}\r\n                    >\r\n                      {project.Description}\r\n                    </Material.Typography>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"Content\" id=\"contact\">\r\n          <Material.Typography\r\n            variant=\"h3\"\r\n            paragraph\r\n            className=\"SectionHeader\"\r\n          >\r\n            {Data.Contact.Title}\r\n          </Material.Typography>\r\n          <span className=\"GrayText\">\r\n            <Material.Typography variant=\"subtitle1\">\r\n              {Data.Contact.Description}\r\n            </Material.Typography>\r\n          </span>\r\n          <div className=\"ContactFields\">\r\n            {Data.Contact.Fields.map(field =>\r\n              <div\r\n                key={field.ID}\r\n                style={{\r\n                  gridColumnStart: field.GridColumnStart,\r\n                  gridColumnEnd: \"span \" + field.GridColumnSpan\r\n                }}\r\n              >\r\n                {\r\n                  field.Component === \"TextField\" ?\r\n                    <Material.TextField\r\n                      id={field.ID}\r\n                      type={field.Type}\r\n                      label={field.Label}\r\n                      required={field.Required}\r\n                      onChange={handleFieldChange}\r\n                      value={formData[field.ID] ?? \"\"}\r\n                      multiline={field.Multiline}\r\n                      rows={field.Rows}\r\n                      error={formErrors && !fieldValid(field)}\r\n                      helperText={formErrors && !fieldValid(field) ?\r\n                        field.HelperText : null}\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                    /> :\r\n                    field.Component === \"Select\" ?\r\n                      <Material.FormControl\r\n                        id={field.ID}\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        required={field.Required}\r\n                        error={formErrors && !fieldValid(field)}\r\n                      >\r\n                        <Material.InputLabel\r\n                          id={field.ID + \"-label\"}\r\n                        >\r\n                          {field.Label}\r\n                        </Material.InputLabel>\r\n                        <Material.Select\r\n                          id={field.ID}\r\n                          name={field.ID}\r\n                          labelId={field.ID + \"-label\"}\r\n                          value={formData[field.ID] ?? \"\"}\r\n                          onChange={handleFieldChange}\r\n                        >\r\n                          {field.Items.map(item =>\r\n                            <Material.MenuItem\r\n                              key={item}\r\n                              value={item}\r\n                            >\r\n                              {item}\r\n                            </Material.MenuItem>\r\n                          )}\r\n                        </Material.Select>\r\n                        <Material.FormHelperText>\r\n                          {formErrors && !fieldValid(field) ?\r\n                            field.HelperText : null}\r\n                        </Material.FormHelperText>\r\n                      </Material.FormControl> : null\r\n                }\r\n              </div>\r\n            )}\r\n          </div>\r\n          <Material.Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"large\"\r\n            onClick={handleSendClick}\r\n          >\r\n            {Data.Contact.Button}\r\n          </Material.Button>\r\n        </div>\r\n      </div>\r\n      <footer className=\"Footer\">\r\n        <div className=\"Content GrayText\">\r\n          <Material.Typography paragraph>\r\n            {Data.Footer.Copyright.replace(\"{year}\", new Date().getFullYear())}\r\n          </Material.Typography>\r\n          <Material.Button \r\n            onClick={() => handleLink(Data.Footer.PromotionLink)}\r\n          >\r\n            {Data.Footer.PromotionText}\r\n          </Material.Button>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Data from './Data.json';\r\n\r\nlet theme = createMuiTheme(Data.Meta.Theme);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}