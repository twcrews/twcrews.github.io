{"version":3,"sources":["App.js","index.js"],"names":["App","useState","shadowNav","setShadowNav","currentThing","setCurrentThing","formData","setFormData","formErrors","setFormErrors","handleFieldChange","event","tmpForm","target","id","name","value","useScrollPosition","_prevPos","isScrolled","currPos","y","useEffect","interval","setInterval","Data","Header","SubtitleItems","length","clearInterval","Fragment","className","elevation","position","alt","src","Meta","Logo","variant","Owner","Anchors","map","anchor","Name","Variant","color","Color","onClick","document","getElementById","Link","scrollIntoView","style","backgroundImage","Hero","paragraph","Title","SubtitlePrefix","text","inline","Attributes","attr","Icon","fontSize","Description","Sections","section","Content","item","Portfolio","Projects","project","Image","backgroundColor","backgroundSize","backgroundPosition","Enabled","url","window","open","textTransform","Year","opacity","Contact","Fields","field","gridColumnStart","GridColumnStart","gridColumnEnd","GridColumnSpan","Component","ID","type","Type","label","Label","required","Required","onChange","multiline","Multiline","rows","Rows","error","helperText","HelperText","fullWidth","labelId","Items","size","valid","forEach","formValid","Button","theme","createMuiTheme","Theme","ReactDOM","render","StrictMode","ThemeProvider"],"mappings":"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","file":"static/js/main.3107a0fa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport * as Material from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position';\r\nimport TextTransition from 'react-text-transition';\r\nimport Data from './Data.json';\r\n\r\nfunction App() {\r\n  const [shadowNav, setShadowNav] = useState(false);\r\n  const [currentThing, setCurrentThing] = useState(0);\r\n  const [formData, setFormData] = useState({});\r\n  const [formErrors, setFormErrors] = useState(false);\r\n\r\n  const formValid = () => {\r\n    var valid = true;\r\n    Data.Contact.Fields.forEach(field => {\r\n      if (!formData[field.ID]) {\r\n        valid = false;\r\n      }\r\n    });\r\n    return valid;\r\n  };\r\n\r\n  const submitForm = () => {\r\n\r\n  }\r\n\r\n  const handleLink = (url) => { window.open(url, \"_blank\") };\r\n  const handleFieldChange = (event) => {\r\n    var tmpForm = {...formData};\r\n    tmpForm[event.target.id ?? event.target.name] = event.target.value;\r\n    setFormData(tmpForm);\r\n  };\r\n  const handleSendClick = () => {\r\n    if (!formValid()) {\r\n      setFormErrors(true);\r\n    } else {\r\n      submitForm();\r\n    }\r\n  }\r\n\r\n  useScrollPosition(({ _prevPos, currPos }) => {\r\n    const isScrolled = currPos.y < 0;\r\n    if (isScrolled !== shadowNav) setShadowNav(isScrolled);\r\n  }, [shadowNav]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (currentThing < Data.Header.SubtitleItems.length - 1) {\r\n        setCurrentThing(currentThing + 1);\r\n      } else {\r\n        setCurrentThing(0);\r\n      }\r\n    }, 2000);\r\n    return (() => clearInterval(interval));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        id=\"top\"\r\n        className=\"Top\"\r\n      />\r\n      <Material.AppBar\r\n        id=\"nav\"\r\n        elevation={shadowNav ? 3 : 0}\r\n        className=\"AppBar\"\r\n        position=\"sticky\"\r\n      >\r\n        <Material.Toolbar className=\"NavBar\">\r\n          <span className=\"NavItems\">\r\n            <img\r\n              className=\"NavLogo\"\r\n              alt=\"Logo\"\r\n              src={Data.Meta.Logo}\r\n            />\r\n            <Material.Typography\r\n              className=\"NavTitle\"\r\n              variant=\"h6\"\r\n            >\r\n              {Data.Meta.Owner}\r\n            </Material.Typography>\r\n          </span>\r\n          <span className=\"NavItems\">\r\n            {Data.Meta.Anchors.map(anchor =>\r\n              <Material.Button\r\n                key={anchor.Name}\r\n                id={anchor.Name}\r\n                className=\"AnchorButton\"\r\n                variant={anchor.Variant}\r\n                color={anchor.Color}\r\n                onClick={() => document\r\n                  .getElementById(anchor.Link)\r\n                  .scrollIntoView()}\r\n              >\r\n                {anchor.Name}\r\n              </Material.Button>\r\n            )}\r\n          </span>\r\n        </Material.Toolbar>\r\n      </Material.AppBar>\r\n      <div\r\n        className=\"AboutSection\"\r\n      >\r\n        <div\r\n          className=\"Hero\"\r\n          style={{ backgroundImage: \"url(\" + Data.Header.Hero + \")\" }}\r\n        />\r\n        <Material.Typography\r\n          variant=\"h1\"\r\n          paragraph\r\n          className=\"Header\"\r\n        >\r\n          {Data.Header.Title}\r\n        </Material.Typography>\r\n        <Material.Typography\r\n          variant=\"h4\"\r\n          className=\"Subtitle\"\r\n        >\r\n          {Data.Header.SubtitlePrefix}\r\n          <TextTransition\r\n            text={Data.Header.SubtitleItems[currentThing]}\r\n            inline\r\n          />\r\n        </Material.Typography>\r\n        <div className=\"HeaderSpacer\" />\r\n      </div>\r\n      <div className=\"AttributesSection Content\">\r\n        <div className=\"Attributes\">\r\n          {Data.Attributes.map(attr =>\r\n            <div\r\n              key={attr.Name}\r\n              className=\"AttributeTile\"\r\n            >\r\n              <span className=\"BigIcon\">\r\n                <Icon fontSize=\"inherit\" color=\"primary\">\r\n                  {attr.Icon}\r\n                </Icon>\r\n                <Material.Typography variant=\"h5\">\r\n                  {attr.Name}\r\n                </Material.Typography>\r\n              </span>\r\n              <div className=\"Multiline GrayText\">\r\n                <Material.Typography color=\"inherit\">\r\n                  {attr.Description}\r\n                </Material.Typography>\r\n                <Material.Typography variant=\"h6\" paragraph />\r\n                {attr.Sections.map(section =>\r\n                  <React.Fragment key={section.Title}>\r\n                    <Material.Typography variant=\"h6\">\r\n                      {section.Title}\r\n                    </Material.Typography>\r\n                    {section.Content.map(item =>\r\n                      <Material.Typography key={item}>\r\n                        {item}\r\n                      </Material.Typography>\r\n                    )}\r\n                    <Material.Typography variant=\"h6\" paragraph />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"Content\" id=\"portfolio\">\r\n        <Material.Typography \r\n          variant=\"h3\" \r\n          paragraph\r\n          className=\"SectionHeader\"\r\n        >\r\n          {Data.Portfolio.Title}\r\n        </Material.Typography>\r\n        <span className=\"GrayText\">\r\n          <Material.Typography variant=\"subtitle1\" paragraph>\r\n            {Data.Portfolio.Description}\r\n          </Material.Typography>\r\n        </span>\r\n        <div className=\"PortfolioTiles\">\r\n          {Data.Portfolio.Projects.map(project =>\r\n            <div\r\n              key={project.Title}\r\n              className=\"PortfolioProject\"\r\n              style={{\r\n                backgroundImage: \"url(\" + project.Image + \")\",\r\n                backgroundColor: \"#00b9ff\",\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center\"\r\n              }}\r\n            >\r\n              <div\r\n                className=\"Darken FullHeight\"\r\n                onClick={() => project.Enabled ?\r\n                  handleLink(project.Link) :\r\n                  null}\r\n              >\r\n                <div className=\"ProjectTypography\">\r\n                  <Material.Typography variant=\"h6\">\r\n                    {project.Title}\r\n                  </Material.Typography>\r\n                  <Material.Typography\r\n                    variant=\"caption\"\r\n                    style={{ textTransform: \"uppercase\" }}\r\n                  >\r\n                    {project.Year}\r\n                  </Material.Typography>\r\n                  <Material.Typography\r\n                    variant=\"subtitle2\"\r\n                    style={{ opacity: 0.8 }}\r\n                  >\r\n                    {project.Description}\r\n                  </Material.Typography>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"Content\" id=\"contact\">\r\n        <Material.Typography\r\n          variant=\"h3\" \r\n          paragraph\r\n          className=\"SectionHeader\"\r\n        >\r\n          {Data.Contact.Title}\r\n        </Material.Typography>\r\n        <span className=\"GrayText\">\r\n          <Material.Typography variant=\"subtitle1\">\r\n            {Data.Contact.Description}\r\n          </Material.Typography>\r\n        </span>\r\n        <div className=\"ContactFields\">\r\n          {Data.Contact.Fields.map(field => \r\n            <div \r\n              key={field.ID}\r\n              style={{\r\n                gridColumnStart: field.GridColumnStart,\r\n                gridColumnEnd: \"span \" + field.GridColumnSpan\r\n              }}\r\n            >\r\n              {\r\n                field.Component === \"TextField\" ?\r\n                  <Material.TextField\r\n                    id={field.ID}\r\n                    type={field.Type}\r\n                    label={field.Label}\r\n                    required={field.Required}\r\n                    onChange={handleFieldChange}\r\n                    value={formData[field.ID] ?? \"\"}\r\n                    multiline={field.Multiline}\r\n                    rows={field.Rows}\r\n                    error={!formData[field.ID] && formErrors}\r\n                    helperText = {formErrors && !formData[field.ID] ?\r\n                       field.HelperText : null}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                  /> :\r\n                  field.Component === \"Select\" ?\r\n                  <Material.FormControl \r\n                    id={field.ID}\r\n                    variant=\"filled\" \r\n                    fullWidth\r\n                    required={field.Required}\r\n                    error={!formData[field.ID] && formErrors}\r\n                  >\r\n                    <Material.InputLabel \r\n                      id={field.ID + \"-label\"}\r\n                    >\r\n                      {field.Label}\r\n                    </Material.InputLabel>\r\n                    <Material.Select\r\n                      id={field.ID}\r\n                      name={field.ID}\r\n                      labelId={field.ID + \"-label\"}\r\n                      value={formData[field.ID] ?? \"\"}\r\n                      onChange={handleFieldChange}\r\n                    >\r\n                      {field.Items.map(item =>\r\n                        <Material.MenuItem\r\n                          key={item}\r\n                          value={item}\r\n                        >\r\n                          {item}\r\n                        </Material.MenuItem>\r\n                      )}\r\n                    </Material.Select>\r\n                    <Material.FormHelperText>\r\n                      {formErrors && !formData[field.ID] ?\r\n                       field.HelperText : null}\r\n                    </Material.FormHelperText>\r\n                  </Material.FormControl> : null\r\n              }\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Material.Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"large\"\r\n          onClick={handleSendClick}\r\n        >\r\n          {Data.Contact.Button}\r\n        </Material.Button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Data from './Data.json';\r\n\r\nlet theme = createMuiTheme(Data.Meta.Theme);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}