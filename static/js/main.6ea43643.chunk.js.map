{"version":3,"sources":["App.js","index.js"],"names":["App","MessageState","Object","freeze","useState","shadowNav","setShadowNav","currentThing","setCurrentThing","formData","setFormData","formError","setFormError","Initial","message","setMessage","fieldValid","field","val","ID","pattern","RegExp","Pattern","trim","length","test","handleLink","url","window","open","handleFieldChange","event","tmpForm","target","id","name","value","useScrollPosition","_prevPos","isScrolled","currPos","y","useEffect","interval","setInterval","Data","Header","SubtitleItems","clearInterval","contactForm","Fragment","className","Contact","Fields","map","style","gridColumnStart","GridColumnStart","gridColumnEnd","GridColumnSpan","Component","type","Type","label","Label","required","Required","onChange","multiline","Multiline","rows","Rows","error","helperText","HelperText","fullWidth","variant","labelId","Items","item","color","size","onClick","BreakException","forEach","e","formValid","Sending","formUrl","Meta","FormUrl","formEntries","Entry","formValues","submitData","FormData","entry","i","append","fetch","method","mode","referrer","body","then","response","ok","status","Sent","Error","catch","submitForm","Button","infoCard","backgroundColor","Icon","fontSize","marginBottom","Dialog","SubmitFail","Message","SubmitSuccess","elevation","position","alt","src","Logo","Owner","Anchors","anchor","Variant","Color","document","getElementById","Link","scrollIntoView","Name","backgroundImage","Hero","paragraph","Title","SubtitlePrefix","text","inline","Attributes","attr","Description","Sections","section","Content","Portfolio","Projects","project","Enabled","Image","backgroundSize","backgroundPosition","textTransform","Year","opacity","marginTop","Footer","Copyright","replace","Date","getFullYear","Subtext","disableElevation","PromotionLink","PromotionText","theme","createMuiTheme","Theme","ReactDOM","render","StrictMode","ThemeProvider"],"mappings":"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","file":"static/js/main.6ea43643.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport * as Material from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position';\r\nimport TextTransition from 'react-text-transition';\r\nimport Data from './Data.json';\r\n\r\nfunction App() {\r\n\r\n  /* \r\n  ====================\r\n    ENUMS\r\n  ====================\r\n  */\r\n\r\n  const MessageState = Object.freeze({\r\n    \"Initial\": 0,\r\n    \"Sending\": 1,\r\n    \"Sent\": 2,\r\n    \"Error\": 3\r\n  });\r\n\r\n  /* \r\n  ====================\r\n    STATE\r\n  ====================\r\n  */\r\n\r\n  const [shadowNav, setShadowNav] = useState(false);\r\n  const [currentThing, setCurrentThing] = useState(0);\r\n  const [formData, setFormData] = useState({});\r\n  const [formError, setFormError] = useState(false);\r\n  const [message, setMessage] = useState(MessageState.Initial);\r\n\r\n  /* \r\n  ====================\r\n    FUNCTIONS\r\n  ====================\r\n  */\r\n\r\n  const fieldValid = (field) => {\r\n    var val = formData[field.ID];\r\n    var pattern = new RegExp(field.Pattern);\r\n    if (val) {\r\n      return val.trim().length > 0 && pattern.test(val.trim());\r\n    }\r\n  };\r\n  const formValid = () => {\r\n    var BreakException = {};\r\n    try {\r\n      Data.Contact.Fields.forEach(field => {\r\n        if (!fieldValid(field)) {\r\n          throw BreakException;\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (e !== BreakException) throw e;\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  const submitForm = () => {\r\n    setMessage(MessageState.Sending);\r\n    var formUrl = Data.Meta.FormUrl;\r\n    var formEntries = Data.Contact.Fields.map(field => field.Entry);\r\n    var formValues = Data.Contact.Fields.map(field => formData[field.ID]);\r\n    var submitData = new FormData();\r\n    formEntries.forEach((entry, i) => submitData.append(entry, formValues[i]));\r\n    fetch(formUrl, {\r\n      method: \"POST\",\r\n      mode: \"no-cors\",\r\n      referrer: \"strict-origin-when-cross-origin\",\r\n      body: submitData\r\n    })\r\n      .then(response => {\r\n        if (response.ok || response.status === 0) {\r\n          setMessage(MessageState.Sent);\r\n        } else {\r\n          setMessage(MessageState.Error);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setMessage(MessageState.Error);\r\n      });\r\n  }\r\n\r\n  /* \r\n  ====================\r\n    EVENT HANDLERS\r\n  ====================\r\n  */\r\n\r\n  const handleLink = (url) => { window.open(url, \"_blank\"); };\r\n  const handleFieldChange = (event) => {\r\n    var tmpForm = { ...formData };\r\n    tmpForm[event.target.id ?? event.target.name] = event.target.value;\r\n    setFormData(tmpForm);\r\n  };\r\n  const handleSendClick = () => {\r\n    if (!formValid()) {\r\n      setFormError(true);\r\n    } else {\r\n      submitForm();\r\n    }\r\n  };\r\n\r\n  /* \r\n  ====================\r\n    HOOKS\r\n  ====================\r\n  */\r\n\r\n  useScrollPosition(({ _prevPos, currPos }) => {\r\n    const isScrolled = currPos.y < 0;\r\n    if (isScrolled !== shadowNav) setShadowNav(isScrolled);\r\n  }, [shadowNav]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (currentThing < Data.Header.SubtitleItems.length - 1) {\r\n        setCurrentThing(currentThing + 1);\r\n      } else {\r\n        setCurrentThing(0);\r\n      }\r\n    }, 2000);\r\n    return (() => clearInterval(interval));\r\n  });\r\n\r\n  /*\r\n  ====================\r\n    UI SEGMENTS\r\n  ====================\r\n  */\r\n\r\n  const contactForm = (\r\n    <React.Fragment>\r\n      <div className=\"ContactForm\">\r\n        {Data.Contact.Fields.map(field =>\r\n          <div\r\n            key={field.ID}\r\n            style={{\r\n              gridColumnStart: field.GridColumnStart,\r\n              gridColumnEnd: \"span \" + field.GridColumnSpan\r\n            }}\r\n            className=\"ContactField\"\r\n          >\r\n            {\r\n              field.Component === \"TextField\" ?\r\n                <Material.TextField\r\n                  id={field.ID}\r\n                  type={field.Type}\r\n                  label={field.Label}\r\n                  required={field.Required}\r\n                  onChange={handleFieldChange}\r\n                  value={formData[field.ID] ?? \"\"}\r\n                  multiline={field.Multiline}\r\n                  rows={field.Rows}\r\n                  error={formError && !fieldValid(field)}\r\n                  helperText={formError && !fieldValid(field) ?\r\n                    field.HelperText : null}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                /> :\r\n                field.Component === \"Select\" ?\r\n                  <Material.FormControl\r\n                    id={field.ID}\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    required={field.Required}\r\n                    error={formError && !fieldValid(field)}\r\n                  >\r\n                    <Material.InputLabel\r\n                      id={field.ID + \"-label\"}\r\n                    >\r\n                      {field.Label}\r\n                    </Material.InputLabel>\r\n                    <Material.Select\r\n                      id={field.ID}\r\n                      name={field.ID}\r\n                      labelId={field.ID + \"-label\"}\r\n                      value={formData[field.ID] ?? \"\"}\r\n                      onChange={handleFieldChange}\r\n                    >\r\n                      {field.Items.map(item =>\r\n                        <Material.MenuItem\r\n                          key={item}\r\n                          value={item}\r\n                        >\r\n                          {item}\r\n                        </Material.MenuItem>\r\n                      )}\r\n                    </Material.Select>\r\n                    <Material.FormHelperText>\r\n                      {formError && !fieldValid(field) ?\r\n                        field.HelperText : null}\r\n                    </Material.FormHelperText>\r\n                  </Material.FormControl> : null\r\n            }\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"ActionButton\">\r\n        <Material.Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"large\"\r\n          onClick={handleSendClick}\r\n        >\r\n          {Data.Contact.Button}\r\n        </Material.Button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const infoCard = (\r\n    <div\r\n      className=\"InfoCard\"\r\n      style={{\r\n        backgroundColor:\r\n          message === MessageState.Error ?\r\n            \"#fff2cf\" : \"#ddffdd\"\r\n      }}\r\n    >\r\n      {message === MessageState.Error ?\r\n        <Icon style={{\r\n          fontSize: \"60px\",\r\n          color: \"red\",\r\n          marginBottom: \"10px\"\r\n        }}>\r\n          highlight_off\r\n        </Icon> :\r\n        <Icon style={{\r\n          fontSize: \"60px\",\r\n          color: \"green\",\r\n          marginBottom: \"10px\"\r\n        }}>\r\n          check_circle\r\n        </Icon>\r\n      }\r\n      <span className=\"GrayText\">\r\n        <Material.Typography>\r\n          {message === MessageState.Error ?\r\n            Data.Dialog.SubmitFail.Message :\r\n            Data.Dialog.SubmitSuccess.Message}\r\n        </Material.Typography>\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  /* \r\n  ====================\r\n    RENDER\r\n  ====================\r\n  */\r\n\r\n  return (\r\n    <div id=\"page\">\r\n      <div id=\"body-wrap\">\r\n\r\n        {/* Navigation bar */}\r\n        <div id=\"top\" />\r\n        <Material.AppBar\r\n          id=\"nav\"\r\n          elevation={shadowNav ? 3 : 0}\r\n          position=\"sticky\"\r\n        >\r\n          <Material.Toolbar id=\"nav-bar\">\r\n            <span className=\"NavItems\">\r\n              <img\r\n                id=\"nav-logo\"\r\n                alt=\"Logo\"\r\n                src={Data.Meta.Logo}\r\n              />\r\n              <Material.Typography\r\n                id=\"nav-title\"\r\n                variant=\"h6\"\r\n              >\r\n                {Data.Meta.Owner}\r\n              </Material.Typography>\r\n            </span>\r\n            <span className=\"NavItems\">\r\n              {Data.Meta.Anchors.map(anchor =>\r\n                <Material.Button\r\n                  key={anchor.Name}\r\n                  id={anchor.ID}\r\n                  className=\"AnchorButton\"\r\n                  variant={anchor.Variant}\r\n                  color={anchor.Color}\r\n                  onClick={() => document\r\n                    .getElementById(anchor.Link)\r\n                    .scrollIntoView()}\r\n                >\r\n                  {anchor.Name}\r\n                </Material.Button>\r\n              )}\r\n            </span>\r\n          </Material.Toolbar>\r\n        </Material.AppBar>\r\n\r\n        {/* Header/hero */}\r\n        <div id=\"about-section\">\r\n          <div\r\n            id=\"hero\"\r\n            style={{ backgroundImage: \"url(\" + Data.Header.Hero + \")\" }}\r\n          />\r\n          <Material.Typography\r\n            id=\"title\"\r\n            variant=\"h1\"\r\n            paragraph\r\n          >\r\n            {Data.Header.Title}\r\n          </Material.Typography>\r\n          <Material.Typography\r\n            id=\"subtitle\"\r\n            variant=\"h4\"\r\n          >\r\n            {Data.Header.SubtitlePrefix}\r\n            <TextTransition\r\n              text={Data.Header.SubtitleItems[currentThing]}\r\n              inline\r\n            />\r\n          </Material.Typography>\r\n          <div className=\"HeaderSpacer\" />\r\n        </div>\r\n\r\n        {/* Attributes */}\r\n        <div id=\"attributes-section\" className=\"Content\">\r\n          <div className=\"Attributes\">\r\n            {Data.Attributes.map(attr =>\r\n              <div\r\n                key={attr.Name}\r\n                className=\"AttributeTile\"\r\n              >\r\n                <span className=\"BigIcon\">\r\n                  <Icon fontSize=\"inherit\" color=\"primary\">\r\n                    {attr.Icon}\r\n                  </Icon>\r\n                  <Material.Typography variant=\"h5\">\r\n                    {attr.Name}\r\n                  </Material.Typography>\r\n                </span>\r\n                <div className=\"Multiline GrayText\">\r\n                  <Material.Typography color=\"inherit\">\r\n                    {attr.Description}\r\n                  </Material.Typography>\r\n                  <Material.Typography variant=\"h6\" paragraph />\r\n                  {attr.Sections.map(section =>\r\n                    <React.Fragment key={section.Title}>\r\n                      <Material.Typography variant=\"h6\">\r\n                        {section.Title}\r\n                      </Material.Typography>\r\n                      {section.Content.map(item =>\r\n                        <Material.Typography key={item}>\r\n                          {item}\r\n                        </Material.Typography>\r\n                      )}\r\n                      <Material.Typography variant=\"h6\" paragraph />\r\n                    </React.Fragment>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"SectionSpacer\" />\r\n\r\n        {/* Project portfolio */}\r\n        <div className=\"Content\" id=\"portfolio-section\">\r\n          <Material.Typography\r\n            variant=\"h3\"\r\n            paragraph\r\n            className=\"SectionHeader\"\r\n          >\r\n            {Data.Portfolio.Title}\r\n          </Material.Typography>\r\n          <span className=\"GrayText\">\r\n            <Material.Typography variant=\"subtitle1\" paragraph>\r\n              {Data.Portfolio.Description}\r\n            </Material.Typography>\r\n          </span>\r\n          <div className=\"PortfolioTiles\">\r\n            {Data.Portfolio.Projects.map(project =>\r\n              project.Enabled ?\r\n                <div\r\n                  key={project.Title}\r\n                  className=\"PortfolioProject\"\r\n                  style={{\r\n                    backgroundImage: \"url(\" + project.Image + \")\",\r\n                    backgroundColor: \"#00b9ff\",\r\n                    backgroundSize: \"cover\",\r\n                    backgroundPosition: \"center\"\r\n                  }}\r\n                >\r\n                  <div\r\n                    className=\"Darken FullHeight\"\r\n                    onClick={() => project.Enabled ?\r\n                      handleLink(project.Link) :\r\n                      null}\r\n                  >\r\n                    <div className=\"ProjectTypography\">\r\n                      <Material.Typography variant=\"h6\">\r\n                        {project.Title}\r\n                      </Material.Typography>\r\n                      <Material.Typography\r\n                        variant=\"caption\"\r\n                        style={{ textTransform: \"uppercase\" }}\r\n                      >\r\n                        {project.Year}\r\n                      </Material.Typography>\r\n                      <Material.Typography\r\n                        variant=\"subtitle2\"\r\n                        style={{ opacity: 0.8 }}\r\n                      >\r\n                        {project.Description}\r\n                      </Material.Typography>\r\n                    </div>\r\n                  </div>\r\n                </div> : null\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"SectionSpacer\" />\r\n\r\n        {/* Contact form */}\r\n        <div className=\"Content\" id=\"contact-section\">\r\n          <Material.Typography\r\n            variant=\"h3\"\r\n            paragraph\r\n            className=\"SectionHeader\"\r\n          >\r\n            {Data.Contact.Title}\r\n          </Material.Typography>\r\n          <span className=\"GrayText\">\r\n            <Material.Typography variant=\"subtitle1\">\r\n              {Data.Contact.Description}\r\n            </Material.Typography>\r\n          </span>\r\n          {message === MessageState.Initial ?\r\n            contactForm :\r\n            message === MessageState.Sending ?\r\n              <Material.CircularProgress\r\n                size={60}\r\n                style={{ marginTop: \"30px\" }} \r\n              /> :\r\n              infoCard}\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <footer id=\"footer\">\r\n        <div className=\"Content GrayText\">\r\n          <Material.Typography>\r\n            {Data.Footer.Copyright.replace(\"{year}\", new Date().getFullYear())}\r\n          </Material.Typography>\r\n          <Material.Typography variant=\"caption\" paragraph>\r\n            {Data.Footer.Subtext}\r\n          </Material.Typography>\r\n          <Material.Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            disableElevation\r\n            onClick={() => handleLink(Data.Footer.PromotionLink)}\r\n          >\r\n            {Data.Footer.PromotionText}\r\n          </Material.Button>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Data from './Data.json';\r\n\r\nlet theme = createMuiTheme(Data.Meta.Theme);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}